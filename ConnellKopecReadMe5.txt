README
Connell and Kopec CS 48 Project

Introduction
Our compiler now integrates all five parts of the project in one bundle.  It will compile most of our test programs and run them in the simulator, however we do no not necessarily believe that their execution is 100% accurate.  Almost all of the features of C48 are implemented to some extent with the particular exception of constants and some details of function calls.

What's Changed
We have made a great effort to correct previous mistakes on earlier submitted parts for the final project.  Specifically, the lexical analyzer and assembly generation have both changed significantly since parts 3 and 4.  The symbol table changed significantly between part 2 and part 3 to correct errors as well.  We believe the corrections to the lexical analyzer resolve all of the problems cited in our part 4 review.  The assembly generation code now produces assembly code that runs in the TM48 Simulator without crashing for most test files.

What's New
The biggest addition is the bison parser generator located in cs48.y.  It creates complete ASTs similar to the scaffolding code.

SOURCE FILES
Makefile - compiles everything
ast.c - many functions no longer used, provided by THC, partially modified
ast.h - AST header file, denotes node types
tokens.h - a general purpose header file for both the lexxer and parser
lexer.l - The Flex source code for the lexical analyzer
cs48.y - The Bison source code for the parser, based heavily on the project's grammar (with many minor modifications) and Louden's sample YACC/Bison file.  Interacts with Flex directly.
Symtab.c - implements the symbol table based on THC's base code + many modifications
Symtab.h - header for the Symtab
quads.c - The main function that runs the program as well as the code for generating the intermediate code, quads
quads.h - header for quads
assemblygen.c - turns quads into assembly code
assemblygen.h - header for assemblygen

OUTPUT FILES
ast.out - shows the Abstract Syntax Tree generated by the parser
quadsout.txt - shows the generated quads (intermediate code)
tm48code.txt - the assembly generated by the compiler for input into the TM48 Simulator

TEST FILES: what operations/statements they test
mathopstest.c48: id, =, +, -, *, /, double, int, return, int literal, main fun
inequalitytest.c48: int, id, =, int literal, for, <, post++, ||, if, &&, ++pre, >, post--, >=, !=, --pre, !, ==, (exp), *, double literal, if else, return, main fun
supersimple.c48: int, id, double, =, double literal, double array declare, int, function definition, return, int literal, +, if, <, ++pre, function call
looptest.c48: int, id, =, int literal, double, read, write, while, !=, *, post++, do_while, post--, >, switch, case, break, double literal, default
notworking.c48: func def, write, id, main fun, const, int, =, int literal, int array dec, array pull, +, fun call, write

HOW TO RUN:

1.  Run "make" which will compile a program called cs48compiler
2.  Run ./cs48compiler with the name of an input file, for example
"./cs48compiler mathopstest.c48"
3.  cs48compiler will produce the three output files listed above
4.  Run tm48code.txt in the TM48 Simulator 

APPENDIX Quads Generated

Below is a list of all of our intermediate code types along with their functionality and their syntactic form.

Addition
The "Add" quad adds elements found at elements y and z’Äôs memory locations and stores the result in register x.
Quad Generated: (add, x, y, z)

Assign
The "Asn" quad assigns the value in y to location x.
Quad Generated: (asn, x, y, - )

Break
The "Break" exits a loop or a case in a switch statement.
Quad Generated: (brk, - , - , - )

Continue
The "Con" quad makes the program advance, but does not perform any further operations.
Quad Generated: (con, - , - , - )

Division
The "Divi" quad divides the element found at location y by the element found at location z and stores the result in register x, assuming z is not zero.
Quad Generated: (divi, x, y, z)

Enter Scope
The "ENS" quad enters a new scope and adjusts the frame pointer accordingly.
NOTE: This quad is iffy.
Quad Generated: (ens, - , - , - )

Equals
The "EQ" quad will subtract the element found at location z from the element at location y, check if the result is equal to 0, and store the result (1 or 0) in register x.
Quad Generated: (eq, x, y, z)

Exit Scope
The "EXS" quad exits a scope, returns to the previous one, and adjusts the frame pointer accordingly.
NOTE: This quad does not work. We will have to get it to work in the future for the final project, but it does not work now.
Quad Generated: (exs, - , - , - )

Go To Quad
The "Gotoq" quad will jump to quad number x regardless of any other values.
Quad Generated: (gotoq, x, - , - )

Greater Than
The "GT" quad will subtract the element found at location z from the element at location y, check if the result is greater than 0, and store the result (1 or 0) in register x.
Quad Generated: (gt, x, y, z)

Greater Than or Equal To
The "GTEQ" quad will subtract the element found at location z from the element at location y, check if the result is greater than or equal to 0, and store the result (1 or 0) in register x.
Quad Generated: (gteq, x, y, z)

If False
The "If_f" quad will jump to quad number y if and only if the value in x is false.
Quad Generated: (if_f, x, y , - )

Less Than
The "LT" quad will subtract the element found at location z from the element at location y, check if the result is less than 0, and store the result (1 or 0) in register x.
Quad Generated: (lt, x, y, z)

Less Than or Equal To
The "LTEQ" quad will subtract the element found at location z from the element at location y, check if the result is less than or equal to 0, and store the result (1 or 0) in register x.
Quad Generated: (lteq, x, y, z)

Load Parameter
The "Loadpar" quad loads a function parameter x into memory.
NOTE: This quad does not work.
Quad Generated: (loadpar, x, - , - )

Not Equal To
The "NEQ" quad will subtract the element found at location z from the element at location y, check if the result is not equal to 0, and store the result (1 or 0) in register x.
Quad Generated: (neq, x, y, z)

Multiplication
The "Mul" quad multiplies the element found at location y by the element found at location z and stores the result in register x.
Quad Generated: (mul, x, y, z)

Read
The "Read" quad reads from the standard input and stores in location x.
Quad Generated: (rd, x, - , - )

Return
The "Ret" quad returns from a function call and enters the previous scope.
Quad Generated: (ret, - , - , - )

Subtraction
The "Sub" quad subtracts the element found at location z from the element found at location y and stores the result in register x.
Quad Generated: (sub, x, y, z)

Symbol
The "Sym" quad is a dummy quad that is used internally to deal with data storage in the symbol table.
Quad Generated: (sym, x, y, z)

Write
The "Write" quad loads what is to be written from memory and then writes to the standard output from register 0.
Quad Generated: (wri, x, - , - )
